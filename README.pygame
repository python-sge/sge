This file has been dedicated to the public domain, to the extent
possible under applicable law, via CC0. See
http://creativecommons.org/publicdomain/zero/1.0/ for more
information. This file is offered as-is, without any warranty.

========================================================================

This file details specifics of the Pygame SGE implementation which
may be useful to know.


FORMATS SUPPORT

sge.gfx.Sprite supports the following image formats if Pygame is built
with full image support:

- PNG
- JPEG
- Non-animated GIF
- BMP
- PCX
- Uncompressed Truevision TGA
- TIFF
- ILBM
- Netpbm
- X Pixmap

If Pygame is built without full image support, sge.gfx.Sprite will only
be able to load uncompressed BMP images.

sge.snd.Sound supports the following audio formats:

- Uncompressed WAV
- Ogg Vorbis

sge.snd.Music supports the following audio formats:

- Ogg Vorbis
- MOD
- XM
- MIDI

MP3 is also supported on some systems, but not all.  On some systems,
attempting to load an unsupported format can crash the game.  Since MP3
support is not available on all systems, it is best to avoid using it;
consider using Ogg Vorbis instead.

For starting position in MOD files, the pattern order number is used
instead of the number of milliseconds.

The pygame.mixer module, which is used for all audio playback, is
optional and depends on SDL_mixer; if pygame.mixer is unavailable,
sounds and music will not play.


MISSING FEATURES

sge.gfx.Sprite.draw_line, sge.dsp.Room.project_line, and
sge.dsp.Game.project_line support anti-aliasing for lines with a
thickness of 1 only.  sge.gfx.Sprite.draw_polygon,
sge.dsp.Room.project_polygon, and sge.dsp.Game.project_polygon support
anti-aliasing for outlines of polygons with a thickness of 1 only.
sge.gfx.Sprite.draw_text, sge.dsp.Room.project_text, and
sge.dsp.Game.project_text support anti-aliasing in all cases.  No other
drawing or projecting methods support anti-aliasing.  If anti-aliasing
is unsupported for a particular case, the Pygame SGE will ignore the
request for anti-aliasing.


RESOLUTION INCONSISTENCIES

Because of some shortcomings in the Pygame API, when sge.game.fullscreen
is True and sge.game.scale is None, the resolution as it was at the time
the game started will always be used, even if the user changes their
resolution while the game is running. On some systems and in some
situations, this can cause the game to crash when switching to
fullscreen.  You should be mindful of this and avoid switching to and
from fullscreen mode when a crash could lead to a loss of important
data, e.g. by putting the option in a menu that can't be accessed during
gameplay.
